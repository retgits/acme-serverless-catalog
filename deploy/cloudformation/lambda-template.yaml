AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

## A text string that describes the template.
Description: >
  The Order service is part of the ACME Fitness Serverless Shop. The goal of this specific service is to register and serve the catalog of items sold by the shop.

## Values to pass to your template at runtime (when you create or update a stack).
Parameters:
  Version:
    Type: String
  Author:
    Type: String
  Team:
    Type: String
  Feature:
    Type: String
    Default: acmeserverless
  Stage:
    Type: String
    Default: dev
  SentryDSN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /Sentry/Dsn

## Specifies properties that are common to all your serverless functions, APIs, and simple tables.
Globals:
  Function:
    Environment:
      Variables:
        TABLE: !Sub "${Feature}-${Stage}"
        REGION: !Ref AWS::Region
        #DYNAMO_URL: http://host.docker.internal:8000 ## Uncomment this property to be able to test locally using DynamoDB local 
        VERSION: !Ref Version
        STAGE: !Ref Stage
        SENTRY_DSN: !Ref SentryDSN
  Api:
    Cors:
      AllowOrigin: "'*'"

## Specifies the stack resources and their properties.
Resources:
  AllProducts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-catalog-all
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "AllProducts-${Stage}"
      Description: A Lambda function to get all products from DynamoDB
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Feature}-${Stage}"
      Environment:
        Variables:
          FUNCTION_NAME: AllProducts
      Events:
        AllProductsAPI:
          Type: Api
          Properties:
            Path: /products
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  AllProductsLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "AllProducts"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/catalog/", !Ref AllProducts]]
  GetProduct:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-catalog-get
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "GetProduct-${Stage}"
      Description: A Lambda function to get a single product from DynamoDB
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Feature}-${Stage}"
      Environment:
        Variables:
          FUNCTION_NAME: GetProduct
      Events:
        GetProductAPI:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  GetProductLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "GetProduct"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/catalog/", !Ref GetProduct]]
  CreateProduct:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-catalog-newproduct
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "Create-${Stage}"
      Description: A Lambda function to create new products in DynamoDB
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Feature}-${Stage}"
      Environment:
        Variables:
          FUNCTION_NAME: CreateProduct
      Events:
        CreateProductAPI:
          Type: Api
          Properties:
            Path: /product
            Method: POST
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  CreateProductLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "CreateProduct"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/catalog/", !Ref CreateProduct]]

## Describes the values that are returned whenever you view your stack's properties.
Outputs:
  AllProductsURL:
    Description: "API Gateway endpoint URL to get all products"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/products/"
  GetProductURL:
    Description: "API Gateway endpoint URL to get a product"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/products/{id}"
  CreateProductURL:
    Description: "API Gateway endpoint URL to create products"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/"